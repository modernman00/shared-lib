#!/usr/bin/env bash

# Development script for shared-lib
# Usage: ./dev [command]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Commands
install() {
    log "Installing dependencies..."
    composer install
    success "Dependencies installed successfully!"
}

install_dev() {
    log "Installing development dependencies..."
    composer install --dev
    success "Development dependencies installed successfully!"
}

cs_fix() {
    log "Running PHP CS Fixer..."
    if [ "$1" = "--dry-run" ]; then
        vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
    else
        vendor/bin/php-cs-fixer fix --diff --verbose
        success "Code formatting completed!"
    fi
}

analyze() {
    log "Running PHPStan static analysis..."
    vendor/bin/phpstan analyse --memory-limit=1G
    success "Static analysis completed!"
}

audit() {
    log "Checking for security vulnerabilities..."
    composer audit
    success "Security audit completed!"
}

validate() {
    log "Validating composer.json..."
    composer validate --strict
    success "Composer validation completed!"
}

check_syntax() {
    log "Checking PHP syntax errors..."
    find src -name "*.php" -exec php -l {} \; | grep -v "No syntax errors" || true
    success "Syntax check completed!"
}

ci() {
    log "Running full CI pipeline locally..."
    install_dev
    cs_fix --dry-run
    analyze
    audit
    validate
    check_syntax
    success "CI pipeline completed successfully!"
}

help() {
    cat << EOF
Development script for shared-lib

Usage: ./dev [command]

Commands:
    install         Install production dependencies
    install-dev     Install development dependencies
    cs-fix          Run PHP CS Fixer (add --dry-run for check only)
    analyze         Run PHPStan static analysis
    audit           Check for security vulnerabilities
    validate        Validate composer.json
    syntax          Check for PHP syntax errors
    ci              Run full CI pipeline locally
    help            Show this help message

Examples:
    ./dev install-dev    # Install dev dependencies
    ./dev cs-fix         # Fix code formatting
    ./dev cs-fix --dry-run  # Check formatting without fixing
    ./dev ci             # Run all checks
EOF
}

# Main script logic
case "$1" in
    install)
        install
        ;;
    install-dev)
        install_dev
        ;;
    cs-fix)
        cs_fix "$2"
        ;;
    analyze)
        analyze
        ;;
    audit)
        audit
        ;;
    validate)
        validate
        ;;
    syntax)
        check_syntax
        ;;
    ci)
        ci
        ;;
    help|--help|-h)
        help
        ;;
    *)
        if [ -z "$1" ]; then
            help
        else
            error "Unknown command: $1"
            echo ""
            help
            exit 1
        fi
        ;;
esac
